// --------------------------------
// Typography
// --------------------------------

// Edit font rendering -> tip: use for light text on dark backgrounds
@mixin fontSmooth {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}


// Crop top space on text elements - caused by line height
@mixin lhCrop($line-height, $capital-letter: 1) {
  &::before {
    content: "";
    display: block;
    height: 0;
    width: 0;
    margin-top: calc((#{$capital-letter} - #{$line-height}) * 0.5em);
  }
}


// --------------------------------
// Reset
// --------------------------------

// Reset user agent style
@mixin reset {
  background-color: transparent;
  padding: 0;
  border: 0;
  border-radius: 0;
  color: inherit;
  line-height: inherit;
  appearance: none;
}


// --------------------------------
// Accessibility
// --------------------------------

// Hide - content made available only to screen readers
@mixin srHide {
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
  position: absolute;
}

// Show
@mixin srShow {
  clip: auto;
  clip-path: none;
  position: static;
}


// --------------------------------
// Grid & Layout
// --------------------------------

$grid-columns: 12 !default;

// Used to round width to a number with 2 decimal places - used for IE fallback
@function round-width ($i) {
  $width : floor(100% * $i * 100/ $grid-columns) / 100;
  @return $width;
}

// Used to create the auto-size columns of the grid system (.col class)
@mixin autoSizedColumn {
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}

// CSS Grid Layout fallback
@mixin gridFallback($gap: null) {
  display: flex;
  flex-wrap: wrap;
  @if( $gap == null ) {
    $gap: var(--space-md);
  }

  margin: calc(#{$gap} * -1) 0 0 calc(#{$gap} * -1);

  > * {
    padding: #{$gap} 0 0 #{$gap};
    background-clip: content-box;
  }

  @supports (grid-area: auto) {
    margin: 0;

    > * {
      padding: 0;
      max-width: none!important;
    }
  }
}

@mixin column($width) {
  @if unit($width) != "%" {
    $width: $width * 100%;
  }
  flex-basis: #{$width};
  max-width: #{$width};
}


// --------------------------------
// CSS Triangle
// --------------------------------

@mixin triangle ($direction: up, $width: 8px, $color: red) {
  border: $width solid transparent;
  height: 0;
  width: 0;

  @if( $direction == left ) {
    border-right-color: $color;
  } @else if( $direction == right ) {
    border-left-color: $color;
  } @else if( $direction == down ) {
    border-top-color: $color;
  } @else {
    border-bottom-color: $color;
  }

}
